---
title: "Plotly"
author: "Nick Sayresmith"
date: last-modified
format: 
  html: 
    toc: true
    toc-location: right
    number-sections: true
    code-fold: true
    code-tools: true
    fig-width: 6
    fig-asp: 0.618
    out-width: "70%"
    fig-align: center
    fig-format: png
    embed-resources: true
execute:
  echo: true
  warning: false
  cache: true
editor_options: 
  chunk_output_type: console
---

## Summary

Code-along with [**Interactive web-based data visualization with R, plotly, and shiny**](https://plotly-r.com/) by Carson Sievert (written 2019-12-19).

## Libraries

```{r}
#| lable: libraries

library(tidyverse)
library(plotly)
```

## Chapter 2. Overview
```{r}
p <- ggplot(diamonds, aes(x = log(price), color = clarity)) + 
    geom_freqpoly()
ggplotly(p)
```

## Chapter 3. Scattered Foundations
```{r}
data(economics, package = "ggplot2")

# sort economics by psavert, just to 
# show difference between paths and lines
p <- economics %>%
  arrange(psavert) %>%
  plot_ly(x = ~date, y = ~psavert)

add_paths(p)
add_lines(p)
```

## Chapter 17. Server-side linking with shiny

```{r}
library(shiny)

cities <- unique(txhousing$city)

ui <- fluidPage(
  selectizeInput(
    inputId = "cities", 
    label = NULL,
    # placeholder is enabled when 1st choice is an empty string
    choices = c("Please choose a city" = "", cities), 
    multiple = TRUE
  ),
  plotlyOutput(outputId = "p")
)

server <- function(input, output, session, ...) {
  output$p <- renderPlotly({
    req(input$cities)
    # won't show plot if input is empty
    if (identical(input$cities, "")) return(NULL)
    p <- ggplot(data = filter(txhousing, city %in% input$cities)) + 
      geom_line(aes(date, median, group = city))
    # changes plot dimensions when user changes app window dimensions
    height <- session$clientData$output_p_height
    width <- session$clientData$output_p_width
    ggplotly(p, height = height, width = width)
  })
}

shinyApp(ui, server)
```

